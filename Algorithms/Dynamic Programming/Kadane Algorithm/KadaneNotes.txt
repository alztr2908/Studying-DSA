Max sum of a sub array:
Problem: given an array 'arr', find the largest sum that can be formed in a subarray 

arr = [1,2,3,4]

- blocks that can be formed is [1], [1,2], [2,3], [1,2,3], etc.. 
- elements that are not adjacent to each other is not allowed because it is not a sub-array. Arrays should be contiguous to each other
- not allowed based on this example are [1,3], [2,4],[1,4]

example # 1:
 0 1 2  3
[1,2,3,-4]
max_sum = 6 since [1,2,3]

example # 2:
  0 1 2  3
[-1,2,3,-4]
max_sum = 5 since [2,3]

example # 3:
  0  1  2  3
[-1,-2,-3,-4]
max_sum = -1 since all are negatives

Solutions:

A. Brute Force 
    - initialized a current sum each iteration and a maximum sum so far
    - each traversal add the element to the current sum 
    - compare the current sum with maximum sum so far, if current sum is greater, it will be the new maximum sum 
    - once the first iteration is over, repeat it where the starting element is the last element index + 1
    - repeat until end then return the max current so far

    max_sum = arr[0]

    for i in 0..arr:
        current_sum = 0
        for j in i..arr:
            current_sum += arr[j]
            if current_sum > max_sum:
                max_sum = current_sum

    return max_sum

    - This solution is slow since it traverses all possible solution to find the max sub-array
    - Solution to brute force? Kadane's algorithm

B. Kadane's algorithm
    - the optimized solution from the brute force is that it traverses the array in a linear time
    - since the current element don't care about the past element, it can be used as an advantage to set the max sum if negatives appear in the array
    - what do i mean by this?
        - if an array has only positive values, the max sum is the sum of the array itself
        - however since negatives are part of array elements, we can't just sum the whole array
        - so if the sum of the array is less than zero, it cannot be the maximum already if we have positive integers
        - if elements of the array are all negatives, then the smallest negative element will be the max sum
    
    - initialize max current so far to be a really small value (-inf) and max ending at every iteration(value to be compared to max current)
    - traverse each element by adding to the max ending at every iteration
    - if max ending at every iteration is larger than max ending so far, that will be the new max ending so far
    - max ending at every iteration will be compared to 0 and if it is less than zero then it will reset the max ending at every iteration
    - repeat this until the end of the loop and return max current so far


Kadane Algorithm is considered as dynamic programming problem because it uses the solution of the past problem to find the overall optimum solution

In this case, it is because it needs past element to add to the current then it will determine if it is the max sum until the array is finished 