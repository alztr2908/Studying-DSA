Linked list
    -> sequential list of nodes that hold data which point to other nodes also containing data.

    Singly linked list (SLL):
    data -> data -> data -> data -> null
    (head)  (node)          (tail)

    Doubly linked list (DLL):
    data <-> data <-> data <-> data <-> null

Singy Linked
    pros:
        a. use less memory
        b. simpler implmentation
    cons
        a. cannot easily access prev elements

Doubly Linked
    pros: 
        a. can be traversed backwards
    cons: 
        b. twice the memory

SLL Implementation
A. Insertion at nth node
    1. Traverse until (n-1)th node
    2. Point the next pointer of (n-1)th node to the new node
    3. Point the next pointer of new node to the prev nth node
B. Remove at nth node (use 2 pointers)
    Pointer1: current node
    Pointer2: next node
    1. Traverse until Pointer1 reaches (n-1)th node
    2. Temp = Pointer2
    3. Pointer2 will go to deleted node's next node
    4. Make Pointer1's next node Pointer2 current node
    5. Deallocate Temp to avoid memory leaks

DLL Implementation
A. Insertion at nth node
    1. Traverse until (n-1)th node
    2. Point the of the prev pointer of the new node to (n-1)th node and next pointer of the new node to the nth node
    3. Point the next pointer of the (n-1)th node to the new node
    4. Point the prev pointer of the nth node to the new node
B. Remove at nth node 
    1. Traverse until nth node
    2. Set the (n-1)th node's next node to (n+1)th node
    3. Set the (n+1)th node's prev node to (n-1)th node
    4. Deallocate the nth node

Complexity Analysis
    A. SLL
        1. Search -> O(n)
        2. Insert at head -> O(1) //
        3. Insert at tail -> O(1) //insert at tail
        4. Insert at middle -> O(n)
        5. Remove at head -> O(1)
        6. Remove at tail -> O(n)
        7. Remove at middle -> O(n)

    B. DLL 
        1. Search -> O(n)
        2. Insert at head -> O(1)
        3. Insert at tail -> O(1)
        4. Insert at middle -> O(n)
        5. Remove at head -> O(1)
        6. Remove at tail -> O(1)
        7. Remove at middle -> O(n)

Todo

1. DO the SLL source code alone
2. Do the DLL source code from java to python

SLL Implementation
    1. Insert at HEAD
    2. Insert at TAIL
    3. Insert
    3. Delete
    4. Print


Delete

None
ht
head == tail


1 
ht
Insert at head (2)

2 -> 1
h    t

1 
ht
Insert at tail (2)

Inserting at middle:
    1->2->4
    val: 3 ; target_idx: 2
        a. if curr_idx == (target_idx - 1) -> 2
        b. new_node next address: 4
        c. curr_idx next address: 3
    
    EDGE CASE:
        a. if target_idx > length of linked list 
        b. if linked list has no node and want to insert at the correct index which is zero 
    

        c
   1 -> 2 -> None

   3 -> None
   2 -> 3