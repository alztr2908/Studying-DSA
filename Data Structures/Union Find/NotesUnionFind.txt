Complexity of operations:
    - construction => O(n)
    - union => ammortized O(1)
    - find => ammortized O(1)
    - get component size => ammortized O(1)
    - check if connected => ammortized O(1)
    - count components => O(1)

Kruskal's Minimum Spanning Tree
    - Given a graph G = (V,E), we want to find a minimum spanning tree graph (may not be unique).
    - Minimum spanning tree: subset of the edges which connext all vertices in the graph with the minimal total edge cost

    - Pseudocode
        1. Sort edges by ascending edge weight
        2. Walk thru the sorted edges and look at the two nodes the edge belongs to, if the node are already unified, don't include this edge, otherwise include and unify the nodes
        3. algo terminates when every edge has been processed or all the vertices have been unified. 

Union and Find Operations
    1. Creating union find
        - first construct a bijection (mapping) between objects and integers in the range N
        - not necessary
        - store union find info in array, each index has associated object we can lookup through mapping 
    
    2. Find Operation
        - to find which component a particular element belongs to find the root of that component and by following the parent nodes until a self loop is reached (a node who's parent is itself)
    
    3. Union Operation
        - to unify two elements, find which are the root nodes of each component and if the root nodes are different make one of the root nodes be the parent of the other.
        - not efficient enough

